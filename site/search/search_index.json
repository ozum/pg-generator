{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Template Based Scaffolding for PostgreSQL pg-generator is a command line utility which generates files for each table and schema of a PostgreSQL database. Reverse engineers PostgreSQL database, Executes nunjucks templates for each table, schema and for database, Makes database objects available to templates using pg-structure . pg-generator takes your burden of manually creating ORM files or any other files which are based on database structure. Installation $ npm install -g pg-generator Sequelize Example See sequelize template for usage and details. $ pgen template sequelize -t sequelize-template $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --fix First command copies one of the builtin templates (sequelize) into target directory (sequelize-template). Second command generates files based on given template (sequelize-template) into target directory (model). You may change generated templates according to your requirements, also you should add generated templates to your repository . Basic Usage Use pgen template to copy one of the builtin templates or create your own template. (You can use base template for starting up.) Use pgen exec to create files based on your template. You can access CLI options and their description via -h or --help arguments. $ pgen --help $ pgen template --help $ pgen exec --help Template Creating a template from scratch is easy. Execute command below: $ pgen template base -t my-template To see a basic example execute following command from shell and examine files in tutorial-example directory. $ pgen template tutorial -t tutorial-template For a full fledged example which we use at Ozcorp, see Sequelize Example above. For Low Level Direct Access: pg-structure If you prefer lower level methods to directly access PostgreSQL structure to build your own generators. You can check pg-structure module which is used to build this module and provides direct access to database structure. Full Documentation Documentation is available on pg-generator.com Special Thanks Documentation is auto generated thanks to: MkDocs using a theme provided by Read the Docs . Markdown is generated by jsdoc-to-markdown Contributions For contribution please send pull requests with tests on GitHub . BUG REPORTS Without necessary information, it is hard to impossible to debug every error for every database. Please include details below in your bug reports. pg-generator and PostgreSQL version, DDL (Database creation script), pgen commands you executed, JS code you executed if it is a runtime bug, Error message. Send bug reports and feature requests to GitHub Issues .","title":"Home"},{"location":"#template-based-scaffolding-for-postgresql","text":"pg-generator is a command line utility which generates files for each table and schema of a PostgreSQL database. Reverse engineers PostgreSQL database, Executes nunjucks templates for each table, schema and for database, Makes database objects available to templates using pg-structure . pg-generator takes your burden of manually creating ORM files or any other files which are based on database structure.","title":"Template Based Scaffolding for PostgreSQL"},{"location":"#installation","text":"$ npm install -g pg-generator","title":"Installation"},{"location":"#sequelize-example","text":"See sequelize template for usage and details. $ pgen template sequelize -t sequelize-template $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --fix First command copies one of the builtin templates (sequelize) into target directory (sequelize-template). Second command generates files based on given template (sequelize-template) into target directory (model). You may change generated templates according to your requirements, also you should add generated templates to your repository .","title":"Sequelize Example"},{"location":"#basic-usage","text":"Use pgen template to copy one of the builtin templates or create your own template. (You can use base template for starting up.) Use pgen exec to create files based on your template. You can access CLI options and their description via -h or --help arguments. $ pgen --help $ pgen template --help $ pgen exec --help","title":"Basic Usage"},{"location":"#template","text":"Creating a template from scratch is easy. Execute command below: $ pgen template base -t my-template To see a basic example execute following command from shell and examine files in tutorial-example directory. $ pgen template tutorial -t tutorial-template For a full fledged example which we use at Ozcorp, see Sequelize Example above.","title":"Template"},{"location":"#for-low-level-direct-access-pg-structure","text":"If you prefer lower level methods to directly access PostgreSQL structure to build your own generators. You can check pg-structure module which is used to build this module and provides direct access to database structure.","title":"For Low Level Direct Access: pg-structure"},{"location":"#full-documentation","text":"Documentation is available on pg-generator.com","title":"Full Documentation"},{"location":"#special-thanks","text":"Documentation is auto generated thanks to: MkDocs using a theme provided by Read the Docs . Markdown is generated by jsdoc-to-markdown","title":"Special Thanks"},{"location":"#contributions","text":"For contribution please send pull requests with tests on GitHub .","title":"Contributions"},{"location":"#bug-reports","text":"Without necessary information, it is hard to impossible to debug every error for every database. Please include details below in your bug reports. pg-generator and PostgreSQL version, DDL (Database creation script), pgen commands you executed, JS code you executed if it is a runtime bug, Error message. Send bug reports and feature requests to GitHub Issues .","title":"BUG REPORTS"},{"location":"history/","text":"History Release Notes Note : Version history for minimal documentation updates are not listed here to prevent cluttering. 4.5.0 / 2018-06-05 Added: exclude options to schema generation functions. 4.4.0 / 2018-05-20 Added: schwifty template Added: Joi schema generation function Added: TypeScript schema generation function Added: JSDoc schema generation function 4.1.0 / 2017-07-03 Added: --config and --env CLI options. Thanks mmkal for PR. 4.0.0 / 2017-06-18 pg-structure updated to next major version of 4. There are some breaking changes see pg-structure v4 changes . 3.5.0 / 2017-03-16 Added: eslint --fix feature added with lintFix option. If it is set to true and eslint command is available, generated files are fixed with eslint according to .eslintrc or settings in your project. 3.4.14 / 2017-02-21 Fixed: Empty and numeric default values were generated wrong. 3.4.6 / 2016-12-8 Custom data attributeName added for sequelize template. #38 . 3.4.5 / 2016-11-17 SSL option added to CLI. Thanks to gbahamondezc . 3.4.2 / 2016-08-17 Added: singleLine nunjucks filter added. Fixed: Multi line database comments throw exception. 3.4.0 / 2016-06-27 Added: -nobeautifier CLI option added. Added: beautifier option added. 3.3.0 / 2016-05-05 Added: Objection template can be used with custom objection.Model subclass. Changed: Objection template is simplified. Still in alpha stage. Changed: Documentation update. 3.2.4 / 2016-03-22 Fixed: Template file names contain pipe | character for filtering. It's an invalid character in windows file names. Now # is used for filtering. For backward compatibility | can still be used. 3.2.0 / 2016-02-22 Added: New template 'objection-alpha' added. As name suggests, it is in alpha stage, needs some feedback. 3.1.0 / 2016-02-22 Added: hasOne relation support for Sequelize template. 3.0.2 / 2016-02-19 Changed: pg-structure updated to 3.1.3 to make pg-generator compatible with node.js v4 without --harmony flag. 3.0.1 / 2016-02-18 Added: stringifyIfObject filter, which converts it's input to string if it is an object. Changed: sequelize template expands custom data objects automatically. 3.0.0 / 2016-01-30 Changed: pg-structure is updated to v3.1.2 Changed: pg-structure v3 returns collections ad Map and Set instead of Object or Array. Templates are updated as necessary. 2.0.18 / 2015-12-28 Added: PostgreSQL range data types for sequelize template. Added: sequelize template throws more explanatory error for unknown/undefined data types. 2.0.17 / 2015-12-09 Added: Additional test for sequelize template, which compares generated file with an expected result. Fixed: Sequelize template did not generate table description. Changed: pg-structure module updated to v2.0.8. 2.0.7 / 2015-11-29 Changed: pg-structure updated to version 2.0.0-alpha.9 2.0.6 / 2015-11-29 Changed: pg-structure module updated. 2.0.0 / 2015-11-25 Completely rewritten from scratch. CAUTION: 2.0.0 is incompatible with 0.x series. Added: For sequelize-pg-generator users, better direct usable generated files compared to sequelize-pg-generator. pg-generator all features and more. Renamed from sequelize-pg-generator to pg-generator. Added: Updated pg-structure v2 API. Added: Template based generation. Not limited to sequelize. Added: www.pg-generator.com web site. Added: Interactive command line. Added: 3 templates. (Sequelize, base and tutorial) Removed: Configuration files. Templates are easier and more intuitive than config files. Changed: Command changed from 'spgen' to 'pgen'. Changed: Makefile to npm scripts. 0.9.0 Added: sequelize-types are added. (pg-structure deprecated it.) 0.8.0 / 2015-10-14 Added: alias.json file is generated in target directory to let developer easily override relationship names. 0.7.0 / 2015-10-14 Changed: Location of utils.js is changed to inside of model directory. 0.6.0 / 2015-09-10 -t --templateName parameter added to spgen. This name is used to choose one of the builtin template directories. sequalize4 template added for protect backward compatibility. sequalize4 template supports object references property. (references and referencesKey will be depreciated in Sequelize 4) 0.5.4 / 2015-06-16 pg-structure updated to latest version. 0.5.3 / 2015-06-16 Added: JSONB support and Boolean default value. Contributed by viniciuspinto (https://github.com/viniciuspinto) 0.4.2 / 2015-04-27 Added documentation and examples. 0.3.1 / 2015-01-10 Tested for Sequelize 2.0 RC7 0.3.0 / 2014-12-30 Removed: pg-native dependency removed. Some users experienced problems during install. Added: generate.addRelationNameToManyToMany configuration to prefix relation aliases prevent further name clashes which cannot be prevented by generate.addTableNameToManyToMany. Default: true. Added: generate.stripFirstTableNameFromManyToMany configuration added. Default: true Changed: generate.addTableNameToManyToMany configuration default is false now. Changed: Default naming rule for many to many relations. Added: Logging uses Winston module now. Added: Doc update for Windows OS users. Fixed: Database tables without any column throws error when warning configuration is true. 0.2.0 / 2014-12-27 Added: Automatic alias and naming validations to prevent name clash. Added: generate.addTableNameToManyToMany configuration to prefix relation aliases prevent name clash. Default: true. Added: --throwError option added to CLI. This option decides wheter to throw error or simply log. Added: Prevent hasMany through and belongsToMany true at the same time. Fixed: generate.prefixForBelongsTo aliases are not properly camel cased. Fixed: --resetConfig option does not work from CLI Doc update 0.1.17 / 2014-12-26 Fixed: CLI command does not work. Added: Required parameters warning. 0.1.15 / 2014-12-26 Added: Turkish documentation added. Fixed: Typos and mistakes in documents. 0.1.12 / 2014-12-23 Added: Tests added. Added: --nolog option added to spgen command. Added: --resetConfig option. Also details and caveat added to the document. Fix: lib/index.js exported function expects different parameters than written in documentation. Fix: Command line arguments fixed. Fix: Data type variable name configuration is ignored. Document update. 0.1.0 / 2014-12-23 Initial version.","title":"History"},{"location":"history/#history-release-notes","text":"Note : Version history for minimal documentation updates are not listed here to prevent cluttering.","title":"History &amp; Release Notes"},{"location":"history/#450-2018-06-05","text":"Added: exclude options to schema generation functions.","title":"4.5.0 / 2018-06-05"},{"location":"history/#440-2018-05-20","text":"Added: schwifty template Added: Joi schema generation function Added: TypeScript schema generation function Added: JSDoc schema generation function","title":"4.4.0 / 2018-05-20"},{"location":"history/#410-2017-07-03","text":"Added: --config and --env CLI options. Thanks mmkal for PR.","title":"4.1.0 / 2017-07-03"},{"location":"history/#400-2017-06-18","text":"pg-structure updated to next major version of 4. There are some breaking changes see pg-structure v4 changes .","title":"4.0.0 / 2017-06-18"},{"location":"history/#350-2017-03-16","text":"Added: eslint --fix feature added with lintFix option. If it is set to true and eslint command is available, generated files are fixed with eslint according to .eslintrc or settings in your project.","title":"3.5.0 / 2017-03-16"},{"location":"history/#3414-2017-02-21","text":"Fixed: Empty and numeric default values were generated wrong.","title":"3.4.14 / 2017-02-21"},{"location":"history/#346-2016-12-8","text":"Custom data attributeName added for sequelize template. #38 .","title":"3.4.6 / 2016-12-8"},{"location":"history/#345-2016-11-17","text":"SSL option added to CLI. Thanks to gbahamondezc .","title":"3.4.5 / 2016-11-17"},{"location":"history/#342-2016-08-17","text":"Added: singleLine nunjucks filter added. Fixed: Multi line database comments throw exception.","title":"3.4.2 / 2016-08-17"},{"location":"history/#340-2016-06-27","text":"Added: -nobeautifier CLI option added. Added: beautifier option added.","title":"3.4.0 / 2016-06-27"},{"location":"history/#330-2016-05-05","text":"Added: Objection template can be used with custom objection.Model subclass. Changed: Objection template is simplified. Still in alpha stage. Changed: Documentation update.","title":"3.3.0 / 2016-05-05"},{"location":"history/#324-2016-03-22","text":"Fixed: Template file names contain pipe | character for filtering. It's an invalid character in windows file names. Now # is used for filtering. For backward compatibility | can still be used.","title":"3.2.4 / 2016-03-22"},{"location":"history/#320-2016-02-22","text":"Added: New template 'objection-alpha' added. As name suggests, it is in alpha stage, needs some feedback.","title":"3.2.0 / 2016-02-22"},{"location":"history/#310-2016-02-22","text":"Added: hasOne relation support for Sequelize template.","title":"3.1.0 / 2016-02-22"},{"location":"history/#302-2016-02-19","text":"Changed: pg-structure updated to 3.1.3 to make pg-generator compatible with node.js v4 without --harmony flag.","title":"3.0.2 / 2016-02-19"},{"location":"history/#301-2016-02-18","text":"Added: stringifyIfObject filter, which converts it's input to string if it is an object. Changed: sequelize template expands custom data objects automatically.","title":"3.0.1 / 2016-02-18"},{"location":"history/#300-2016-01-30","text":"Changed: pg-structure is updated to v3.1.2 Changed: pg-structure v3 returns collections ad Map and Set instead of Object or Array. Templates are updated as necessary.","title":"3.0.0 / 2016-01-30"},{"location":"history/#2018-2015-12-28","text":"Added: PostgreSQL range data types for sequelize template. Added: sequelize template throws more explanatory error for unknown/undefined data types.","title":"2.0.18 / 2015-12-28"},{"location":"history/#2017-2015-12-09","text":"Added: Additional test for sequelize template, which compares generated file with an expected result. Fixed: Sequelize template did not generate table description. Changed: pg-structure module updated to v2.0.8.","title":"2.0.17 / 2015-12-09"},{"location":"history/#207-2015-11-29","text":"Changed: pg-structure updated to version 2.0.0-alpha.9","title":"2.0.7 / 2015-11-29"},{"location":"history/#206-2015-11-29","text":"Changed: pg-structure module updated.","title":"2.0.6 / 2015-11-29"},{"location":"history/#200-2015-11-25","text":"Completely rewritten from scratch. CAUTION: 2.0.0 is incompatible with 0.x series. Added: For sequelize-pg-generator users, better direct usable generated files compared to sequelize-pg-generator. pg-generator all features and more. Renamed from sequelize-pg-generator to pg-generator. Added: Updated pg-structure v2 API. Added: Template based generation. Not limited to sequelize. Added: www.pg-generator.com web site. Added: Interactive command line. Added: 3 templates. (Sequelize, base and tutorial) Removed: Configuration files. Templates are easier and more intuitive than config files. Changed: Command changed from 'spgen' to 'pgen'. Changed: Makefile to npm scripts.","title":"2.0.0 / 2015-11-25"},{"location":"history/#090","text":"Added: sequelize-types are added. (pg-structure deprecated it.)","title":"0.9.0"},{"location":"history/#080-2015-10-14","text":"Added: alias.json file is generated in target directory to let developer easily override relationship names.","title":"0.8.0 / 2015-10-14"},{"location":"history/#070-2015-10-14","text":"Changed: Location of utils.js is changed to inside of model directory.","title":"0.7.0 / 2015-10-14"},{"location":"history/#060-2015-09-10","text":"-t --templateName parameter added to spgen. This name is used to choose one of the builtin template directories. sequalize4 template added for protect backward compatibility. sequalize4 template supports object references property. (references and referencesKey will be depreciated in Sequelize 4)","title":"0.6.0 / 2015-09-10"},{"location":"history/#054-2015-06-16","text":"pg-structure updated to latest version.","title":"0.5.4 / 2015-06-16"},{"location":"history/#053-2015-06-16","text":"Added: JSONB support and Boolean default value. Contributed by viniciuspinto (https://github.com/viniciuspinto)","title":"0.5.3 / 2015-06-16"},{"location":"history/#042-2015-04-27","text":"Added documentation and examples.","title":"0.4.2 / 2015-04-27"},{"location":"history/#031-2015-01-10","text":"Tested for Sequelize 2.0 RC7","title":"0.3.1 / 2015-01-10"},{"location":"history/#030-2014-12-30","text":"Removed: pg-native dependency removed. Some users experienced problems during install. Added: generate.addRelationNameToManyToMany configuration to prefix relation aliases prevent further name clashes which cannot be prevented by generate.addTableNameToManyToMany. Default: true. Added: generate.stripFirstTableNameFromManyToMany configuration added. Default: true Changed: generate.addTableNameToManyToMany configuration default is false now. Changed: Default naming rule for many to many relations. Added: Logging uses Winston module now. Added: Doc update for Windows OS users. Fixed: Database tables without any column throws error when warning configuration is true.","title":"0.3.0 / 2014-12-30"},{"location":"history/#020-2014-12-27","text":"Added: Automatic alias and naming validations to prevent name clash. Added: generate.addTableNameToManyToMany configuration to prefix relation aliases prevent name clash. Default: true. Added: --throwError option added to CLI. This option decides wheter to throw error or simply log. Added: Prevent hasMany through and belongsToMany true at the same time. Fixed: generate.prefixForBelongsTo aliases are not properly camel cased. Fixed: --resetConfig option does not work from CLI Doc update","title":"0.2.0 / 2014-12-27"},{"location":"history/#0117-2014-12-26","text":"Fixed: CLI command does not work. Added: Required parameters warning.","title":"0.1.17 / 2014-12-26"},{"location":"history/#0115-2014-12-26","text":"Added: Turkish documentation added. Fixed: Typos and mistakes in documents.","title":"0.1.15 / 2014-12-26"},{"location":"history/#0112-2014-12-23","text":"Added: Tests added. Added: --nolog option added to spgen command. Added: --resetConfig option. Also details and caveat added to the document. Fix: lib/index.js exported function expects different parameters than written in documentation. Fix: Command line arguments fixed. Fix: Data type variable name configuration is ignored. Document update.","title":"0.1.12 / 2014-12-23"},{"location":"history/#010-2014-12-23","text":"Initial version.","title":"0.1.0 / 2014-12-23"},{"location":"license/","text":"LICENSE The MIT License (MIT) Copyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"License"},{"location":"license/#license","text":"The MIT License (MIT) Copyright (c) 2015 \u00d6z\u00fcm Eldo\u011fan Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions: The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software. THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.","title":"LICENSE"},{"location":"migration/","text":"Migration from v2 to v3 If you use builtin templates without modification, just regenerate them and use pgen as usual. For those using modified templates or their own templates, below are some steps to migrate from v2 to v3: You should add .array method call to loops. v2: {% for column in table.columns -%} {% endfor %} v3: {% for column in table.columns.array -%} {% endfor %} v2: {{ relation.sourceConstraint.columns[0].name }} v3: {{ relation.sourceConstraint.columns.array[0].name }} Change column#foreignKeyConstraint to column#foreignKeyConstraints.array In database, same column may be part of more than one foreign key constraints. Because of this foreignKeyConstraint is changed to foreignKeyConstraints in pg-structure module. As a consequence you should change your templates like example below: v2: {{ column.foreignKeyConstraint }} v3: {{ column.foreignKeyConstraints.array[0] }} Change column#referencedColumn to column#referencedColumns.array Same reason above. v2: {{ column.referencedColumn }} v3: {{ column.referencedColumns.array[0] }}","title":"Migration"},{"location":"migration/#migration-from-v2-to-v3","text":"If you use builtin templates without modification, just regenerate them and use pgen as usual. For those using modified templates or their own templates, below are some steps to migrate from v2 to v3:","title":"Migration from v2 to v3"},{"location":"migration/#you-should-add-array-method-call-to-loops","text":"v2: {% for column in table.columns -%} {% endfor %} v3: {% for column in table.columns.array -%} {% endfor %} v2: {{ relation.sourceConstraint.columns[0].name }} v3: {{ relation.sourceConstraint.columns.array[0].name }}","title":"You should add .array method call to loops."},{"location":"migration/#change-columnforeignkeyconstraint-to-columnforeignkeyconstraintsarray","text":"In database, same column may be part of more than one foreign key constraints. Because of this foreignKeyConstraint is changed to foreignKeyConstraints in pg-structure module. As a consequence you should change your templates like example below: v2: {{ column.foreignKeyConstraint }} v3: {{ column.foreignKeyConstraints.array[0] }}","title":"Change column#foreignKeyConstraint to column#foreignKeyConstraints.array"},{"location":"migration/#change-columnreferencedcolumn-to-columnreferencedcolumnsarray","text":"Same reason above. v2: {{ column.referencedColumn }} v3: {{ column.referencedColumns.array[0] }}","title":"Change column#referencedColumn to column#referencedColumns.array"},{"location":"relation-names/","text":"Relation Names Relation names are not easy to determine automatically, because every db admin or developer have their own decisions how to name models. Also there isn't right or wrong about naming relations. pg-generator allows any relation naming method through its templating system. For an example, see template/sequelize/partials/helper.nunj.html file in template. Naming Collisions However relation naming collisions happen except when database designs is really basic. To see a possible example of collision see below DDL. There are two references from change_status table and also another reference from process table in transition table. CREATE TABLE process ( process_id serial PRIMARY KEY, name text ); CREATE TABLE change_status ( change_status_id serial PRIMARY KEY, name text ); CREATE TABLE transition ( transition_id serial PRIMARY KEY, process integer REFERENCES process(process_id), current_state integer REFERENCES change_status (change_status_id), next_state integer REFERENCES change_status (change_status_id) ); Even it is not meant a many to many relation here, auto generator cannot determine whether it is a many to many relation or not. \u250c--------- change_status | process --- transition ---- change_status Alternative Methods There are some alternative methods to overcome collision. Those alternatives can be used individually or combined. Using custom data file such as pgen --datafile custom.js , and provide aliases as you wish for collided relations. See Custom Data File Changing naming method in template, and use your own rules for relation names. See template/sequelize/partials/helper.nunj.html in template. You can use generateName() method of pg-structure as described in pg-sturcture relation names . generateName() method can be used in template. This alternative provides convenience and ultimate flexibility at the same time. For example: {{ relation.generateName('complex') }}","title":"Relation Names"},{"location":"relation-names/#relation-names","text":"Relation names are not easy to determine automatically, because every db admin or developer have their own decisions how to name models. Also there isn't right or wrong about naming relations. pg-generator allows any relation naming method through its templating system. For an example, see template/sequelize/partials/helper.nunj.html file in template.","title":"Relation Names"},{"location":"relation-names/#naming-collisions","text":"However relation naming collisions happen except when database designs is really basic. To see a possible example of collision see below DDL. There are two references from change_status table and also another reference from process table in transition table. CREATE TABLE process ( process_id serial PRIMARY KEY, name text ); CREATE TABLE change_status ( change_status_id serial PRIMARY KEY, name text ); CREATE TABLE transition ( transition_id serial PRIMARY KEY, process integer REFERENCES process(process_id), current_state integer REFERENCES change_status (change_status_id), next_state integer REFERENCES change_status (change_status_id) ); Even it is not meant a many to many relation here, auto generator cannot determine whether it is a many to many relation or not. \u250c--------- change_status | process --- transition ---- change_status","title":"Naming Collisions"},{"location":"relation-names/#alternative-methods","text":"There are some alternative methods to overcome collision. Those alternatives can be used individually or combined. Using custom data file such as pgen --datafile custom.js , and provide aliases as you wish for collided relations. See Custom Data File Changing naming method in template, and use your own rules for relation names. See template/sequelize/partials/helper.nunj.html in template. You can use generateName() method of pg-structure as described in pg-sturcture relation names . generateName() method can be used in template. This alternative provides convenience and ultimate flexibility at the same time. For example: {{ relation.generateName('complex') }}","title":"Alternative Methods"},{"location":"api/template-module-api/","text":"Functions allData(db) \u21d2 Object Object returned from this function will be merged with template variables and available in every template file. This function is executed for each generated file. dbData(db) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in db directory. This function is executed for each generated file resulted from templates in db directory. schemaData(schema) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in schema directory. This function is executed for each generated file resulted from templates in schema directory. tableData(table) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in table directory. This function is executed for each generated file resulted from templates in table directory. allData(db) \u21d2 Object Object returned from this function will be merged with template variables and available in every template file. This function is executed for each generated file. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description db pgStructure.db pg-structure db object . dbData(db) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in db directory. This function is executed for each generated file resulted from templates in db directory. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description db pgStructure.db pg-structure db object . schemaData(schema) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in schema directory. This function is executed for each generated file resulted from templates in schema directory. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description schema pgStructure.schema pg-structure schema object . tableData(table) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in table directory. This function is executed for each generated file resulted from templates in table directory. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description table pgStructure.table pg-structure table object .","title":"Template Module API"},{"location":"api/template-module-api/#functions","text":"allData(db) \u21d2 Object Object returned from this function will be merged with template variables and available in every template file. This function is executed for each generated file. dbData(db) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in db directory. This function is executed for each generated file resulted from templates in db directory. schemaData(schema) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in schema directory. This function is executed for each generated file resulted from templates in schema directory. tableData(table) \u21d2 Object Object returned from this function will be merged with template variables and available in templates located in table directory. This function is executed for each generated file resulted from templates in table directory.","title":"Functions"},{"location":"api/template-module-api/#alldatadb-object","text":"Object returned from this function will be merged with template variables and available in every template file. This function is executed for each generated file. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description db pgStructure.db pg-structure db object .","title":"allData(db) \u21d2 Object"},{"location":"api/template-module-api/#dbdatadb-object","text":"Object returned from this function will be merged with template variables and available in templates located in db directory. This function is executed for each generated file resulted from templates in db directory. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description db pgStructure.db pg-structure db object .","title":"dbData(db) \u21d2 Object"},{"location":"api/template-module-api/#schemadataschema-object","text":"Object returned from this function will be merged with template variables and available in templates located in schema directory. This function is executed for each generated file resulted from templates in schema directory. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description schema pgStructure.schema pg-structure schema object .","title":"schemaData(schema) \u21d2 Object"},{"location":"api/template-module-api/#tabledatatable-object","text":"Object returned from this function will be merged with template variables and available in templates located in table directory. This function is executed for each generated file resulted from templates in table directory. Kind : global function Returns : Object - - Object to be merged with template variables. Param Type Description table pgStructure.table pg-structure table object .","title":"tableData(table) \u21d2 Object"},{"location":"builtin-templates/base/","text":"This template may be used to create your own templates from scratch. It generates all necessary boilerplate files. Usage $ pgen template base -t base-template $ pgen exec base-template -d our_crm -u user -p tOpSeCrEt -t my-template","title":"Base"},{"location":"builtin-templates/base/#usage","text":"$ pgen template base -t base-template $ pgen exec base-template -d our_crm -u user -p tOpSeCrEt -t my-template","title":"Usage"},{"location":"builtin-templates/objection/","text":"ALPHA STAGE This template is in alpha stage. Feedback needed. Usage Create template and model files: $ pgen template objection-alpha -t objection-alpha-template $ pgen exec objection-alpha-template -d our_crm -u user -p tOpSeCrEt -t model In your application: const knex = require( knex ); const { model, init } = require( ./model/index ); const credentials = { client: pg , connection: { host: localhost , user: user , password: password , database: my_database } }; init(knex(credentials)); model.Company.query() .then(function(companies) { console.log(companies[0].name); }) .catch(function(error) { console.log(error.stack); }); Features Targets (Some are not implemented yet): Generated model files are as similar as possible to official Objection documents. Created files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans. Documented, Tested, No Dependencies on generated files, Multi schema support, One to many relation support (hasMany and belongsTo), Many to many relation support (belongsToMany), Inter-schema relation support. (i.e. public.account table to other_schema.cutomer table), Default smart naming of models and relations, Very easy to override auto generated files,","title":"Objection"},{"location":"builtin-templates/objection/#alpha-stage","text":"This template is in alpha stage. Feedback needed.","title":"ALPHA STAGE"},{"location":"builtin-templates/objection/#usage","text":"Create template and model files: $ pgen template objection-alpha -t objection-alpha-template $ pgen exec objection-alpha-template -d our_crm -u user -p tOpSeCrEt -t model In your application: const knex = require( knex ); const { model, init } = require( ./model/index ); const credentials = { client: pg , connection: { host: localhost , user: user , password: password , database: my_database } }; init(knex(credentials)); model.Company.query() .then(function(companies) { console.log(companies[0].name); }) .catch(function(error) { console.log(error.stack); });","title":"Usage"},{"location":"builtin-templates/objection/#features-targets-some-are-not-implemented-yet","text":"Generated model files are as similar as possible to official Objection documents. Created files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans. Documented, Tested, No Dependencies on generated files, Multi schema support, One to many relation support (hasMany and belongsTo), Many to many relation support (belongsToMany), Inter-schema relation support. (i.e. public.account table to other_schema.cutomer table), Default smart naming of models and relations, Very easy to override auto generated files,","title":"Features &amp; Targets (Some are not implemented yet):"},{"location":"builtin-templates/schwifty/","text":"ALPHA STAGE This template is in alpha stage. Feedback needed. Usage Create template and model files: $ pgen template schwifty -t schwifty $ pgen exec schwifty -d our_crm -u user -p tOpSeCrEt -t model","title":"Schwifty"},{"location":"builtin-templates/schwifty/#alpha-stage","text":"This template is in alpha stage. Feedback needed.","title":"ALPHA STAGE"},{"location":"builtin-templates/schwifty/#usage","text":"Create template and model files: $ pgen template schwifty -t schwifty $ pgen exec schwifty -d our_crm -u user -p tOpSeCrEt -t model","title":"Usage"},{"location":"builtin-templates/sequelize/","text":"This template is successor of sequelize-pg-generator module which is used for creating sequelize models from existing PostgreSQL database. Usage Create template and model files: $ pgen template sequelize -t sequelize-template $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model In your application, create a sequelize object and initialize models with it: var Sequelize = require( sequelize ); var sequelize = new Sequelize( database , user , password , { dialect: postgres , logging: false }); var model = require( ./model/index.js ).init(sequelize); // You only need to init once. You can just require later. model.Company.findOne({ where: { id: 1 } }) .then(function(company) { console.log(company.name); }) .catch(function(error) { console.log(err.stack); }); After you initialized your model, you shouldn't initialize it again and just require your model like below: var model = require( ./model/index.js ); // No init here, because it is initialized before. // Your code here. Features: Generated model files are as similar as possible to official Sequelize documents. Created files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans. Documented, Tested, No Dependencies on generated files, Multi schema support, One to many relation support (hasMany and belongsTo), Many to many relation support (belongsToMany), Inter-schema relation support. (i.e. public.account table to other_schema.cutomer table), Ultimately configurable and customizable by modifying template files, No configuration file to modify, CLI support, Default smart naming of models and relations, Very easy to override auto generated files, Table Specific Configuration. Template Utility Functions Templates have passed a variable called util which provides some useful utilities. type: {{ util.sequelizeType(column) }} - type: DataTypes.INTEGER uniqueRelatedTables(table) \u21d2 Array. pgStructure.table Returns an array of all tables related to this table. Duplicates are removed, so every related table in the result array is unique. Kind : global function Returns : Array. pgStructure.table - - List of related tables. Param Type Description table pgStructure.table pg-structure table to search related tables for. sequelizeType(column) \u21d2 string Returns Sequelize ORM data type for given column. Kind : global function Returns : string - - Sequelize data type. Param Type Description column pgStructure.column pg-structure column object . Example {{ util.sequelizeType() }} // DataTypes.INTEGER(3) {{ sequelizeType('Sequelize') }} // Sequelize.INTEGER(3) Relations Relations are detected automatically. One to many (hasMany), many to one (belongsTo) and many to many (belongsToMany) relations are detected automatically. If two tables are joined via a join table this module detects it automatically and generates many to many sequelize relations. If a table has more than one foreign key, then it is considered join table. In reality it may not be a join table. However it is impossible to detect that. Special Case: hasOne In short: hasMany relations can be converted to hasOne relations manually using custom-data.js . Details: one to one (hasOne) relations does not really bring any design benefits. In fact, it would cause performance overheads to the database engine for having to link the table rows together. The 2 tables can actually be combined into a single table. However Sequelize provides hasOne type relations. Since there is no way to detect one to one relations automatically, they have to be added manually by using custom data file For example: Suppose Company has many Contacts. To make it one to one relation, below example may be added to custom-data.js . Please note Contact key is singular. Key should be singular version of hasMany aliases. module.exports = { Company: { hasOne: { Contact: {} } } }; Smart Default Naming of Aliases This template uses table names or schema table names for model naming. For relations it uses foreign key names and relation names from your database. (You are naming your relations in database meaningfully right?) Default template is based on camelCase naming. You can easily change it to use snake_case or PascalCase by using provided filters. Naming conventions are based on Sequelize module suggestions and generated explicitly with 'as' parameter. Aliases can be turned of by providing a custom options file and setting generateAliases false. module.exports = { generateAliases: false }; Type of Object Filters Default Naming Alias Rule table classCase Table name. hasMany plural, classCase, stripPrefix(source) Relation name in database. Table name stripped from beginning. belongsTo singular, classCase, relationName Foreign key column name. If name ends with 'id' or '_id' it will be stripped. Otherwise 'related' is added at the beginning to prevent it from clashing with column name. belongsToMany plural, classCase, relationName('') Join table name + foreign key in join table which refers to other table. If name ends with 'id' or '_id' it will be stripped. As an example for the schema above aliases are created as follows. Please note names of foreign keys in cart_line_item table: product_id and cart . To demonstrate different naming rules 'product id' contains _id suffix while 'cart' not. Relation As Why Product.hasMany CartLineItems product_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name. Product.belongsToMany CartLineItemCarts cart_line_item + cart + s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name. Cart.belongsToMany CartLineItemProducts cart_line_item + product _id + s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name. Cart.hasMany CartLineItems cart_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name. CartLineItem.belongsTo RelatedCart Related + cart : Singular of foreign key column prefixed with 'Related' . Otherwise 'Cart' relation and 'cart' column collide in same casing (camelCase, ClassCase etc.) CartLineItem.belongsTo Product product _id : Singular of foreign key column. Id suffix is stripped from column name. Otherwise 'ProductId' relation and 'product_id' column collide in same casing (camelCase, ClassCase etc.) FAQ I have multiple schema with same table names in them. How can I prevent collision of my model names? In your template; Rename 'sequelize/table/definition/{table.name}.js.nunj.html' as 'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html' . Change modelName macro in 'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html' as {{ (table.schema.name + table.name) | classCase }} . Add '{table.schema.name}-' string to 'sequelize.import' and 'require' parts in 'sequelize/db/index.js.nunj.html' file to match new model file's names. I hate aliases that sequelize template generate. What can I do? You have three choices. You either do: Disable aliases all together by creating a file named option.js (you can use any name) with content as below: module.exports = { generateAliases: false // This disables aliases all together. See partials/has-many-nunj.html and other relation templates. }; Feed that file to pgen $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --optionsfile options.js Or use custom aliases for some or all models by creating a file name custom-data.js (you can use any name) with similar content as below: You can see original and overridden aliases in generated file 'relation-cheatsheet.txt'. Account: { hasMany: { HasContacts: { // This is the default alias should have generated by pgen. as: 'MyBeautifulAlias' // This is the alias you want. You renamed 'HasContacts' as 'MyBeautifulAlias' } }, Or change alias naming for all tables by changing has-many.nunj.html , belongs-to.nunj.html , belongs-to-many.nunj.html in partials directory of generated sequelize template. *.nunj.html file extension is ugly. This is not a question. nunj.html extension is chosen because nunjucks command line tools expect files with extension html . However some IDE's struggle to auto complete/help/color nunjucks , swig, twig, jinja files with html extension. We can define .nunj.html extension in IDE's to differentiate template files ( .nunj.html) and html ( .html) files correctly and make nunjucks command line tools happy. However if you really like to use another file extension in your templates create template filw tih your desired extension and use --extension option of pgen $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --extension html","title":"Sequelize"},{"location":"builtin-templates/sequelize/#usage","text":"Create template and model files: $ pgen template sequelize -t sequelize-template $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model In your application, create a sequelize object and initialize models with it: var Sequelize = require( sequelize ); var sequelize = new Sequelize( database , user , password , { dialect: postgres , logging: false }); var model = require( ./model/index.js ).init(sequelize); // You only need to init once. You can just require later. model.Company.findOne({ where: { id: 1 } }) .then(function(company) { console.log(company.name); }) .catch(function(error) { console.log(err.stack); }); After you initialized your model, you shouldn't initialize it again and just require your model like below: var model = require( ./model/index.js ); // No init here, because it is initialized before. // Your code here.","title":"Usage"},{"location":"builtin-templates/sequelize/#features","text":"Generated model files are as similar as possible to official Sequelize documents. Created files are static and transparent. They are not used to create models dynamically. So debugging and seeing what is generated is very easy for humans. Documented, Tested, No Dependencies on generated files, Multi schema support, One to many relation support (hasMany and belongsTo), Many to many relation support (belongsToMany), Inter-schema relation support. (i.e. public.account table to other_schema.cutomer table), Ultimately configurable and customizable by modifying template files, No configuration file to modify, CLI support, Default smart naming of models and relations, Very easy to override auto generated files, Table Specific Configuration.","title":"Features:"},{"location":"builtin-templates/sequelize/#template-utility-functions","text":"Templates have passed a variable called util which provides some useful utilities. type: {{ util.sequelizeType(column) }} - type: DataTypes.INTEGER","title":"Template Utility Functions"},{"location":"builtin-templates/sequelize/#uniquerelatedtablestable-arraypgstructuretable","text":"Returns an array of all tables related to this table. Duplicates are removed, so every related table in the result array is unique. Kind : global function Returns : Array. pgStructure.table - - List of related tables. Param Type Description table pgStructure.table pg-structure table to search related tables for.","title":"uniqueRelatedTables(table) \u21d2 Array.&lt;pgStructure.table&gt;"},{"location":"builtin-templates/sequelize/#sequelizetypecolumn-string","text":"Returns Sequelize ORM data type for given column. Kind : global function Returns : string - - Sequelize data type. Param Type Description column pgStructure.column pg-structure column object . Example {{ util.sequelizeType() }} // DataTypes.INTEGER(3) {{ sequelizeType('Sequelize') }} // Sequelize.INTEGER(3)","title":"sequelizeType(column) \u21d2 string"},{"location":"builtin-templates/sequelize/#relations","text":"Relations are detected automatically. One to many (hasMany), many to one (belongsTo) and many to many (belongsToMany) relations are detected automatically. If two tables are joined via a join table this module detects it automatically and generates many to many sequelize relations. If a table has more than one foreign key, then it is considered join table. In reality it may not be a join table. However it is impossible to detect that.","title":"Relations"},{"location":"builtin-templates/sequelize/#special-case-hasone","text":"In short: hasMany relations can be converted to hasOne relations manually using custom-data.js . Details: one to one (hasOne) relations does not really bring any design benefits. In fact, it would cause performance overheads to the database engine for having to link the table rows together. The 2 tables can actually be combined into a single table. However Sequelize provides hasOne type relations. Since there is no way to detect one to one relations automatically, they have to be added manually by using custom data file For example: Suppose Company has many Contacts. To make it one to one relation, below example may be added to custom-data.js . Please note Contact key is singular. Key should be singular version of hasMany aliases. module.exports = { Company: { hasOne: { Contact: {} } } };","title":"Special Case: hasOne"},{"location":"builtin-templates/sequelize/#smart-default-naming-of-aliases","text":"This template uses table names or schema table names for model naming. For relations it uses foreign key names and relation names from your database. (You are naming your relations in database meaningfully right?) Default template is based on camelCase naming. You can easily change it to use snake_case or PascalCase by using provided filters. Naming conventions are based on Sequelize module suggestions and generated explicitly with 'as' parameter. Aliases can be turned of by providing a custom options file and setting generateAliases false. module.exports = { generateAliases: false }; Type of Object Filters Default Naming Alias Rule table classCase Table name. hasMany plural, classCase, stripPrefix(source) Relation name in database. Table name stripped from beginning. belongsTo singular, classCase, relationName Foreign key column name. If name ends with 'id' or '_id' it will be stripped. Otherwise 'related' is added at the beginning to prevent it from clashing with column name. belongsToMany plural, classCase, relationName('') Join table name + foreign key in join table which refers to other table. If name ends with 'id' or '_id' it will be stripped. As an example for the schema above aliases are created as follows. Please note names of foreign keys in cart_line_item table: product_id and cart . To demonstrate different naming rules 'product id' contains _id suffix while 'cart' not. Relation As Why Product.hasMany CartLineItems product_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name. Product.belongsToMany CartLineItemCarts cart_line_item + cart + s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name. Cart.belongsToMany CartLineItemProducts cart_line_item + product _id + s : Plural of join table name + foreign key column in join table referring to other table. '_id' suffix is stripped from column name. Cart.hasMany CartLineItems cart_ cart_line_items : Plural of relation name. Table name is stripped from the beginning of relation name. CartLineItem.belongsTo RelatedCart Related + cart : Singular of foreign key column prefixed with 'Related' . Otherwise 'Cart' relation and 'cart' column collide in same casing (camelCase, ClassCase etc.) CartLineItem.belongsTo Product product _id : Singular of foreign key column. Id suffix is stripped from column name. Otherwise 'ProductId' relation and 'product_id' column collide in same casing (camelCase, ClassCase etc.)","title":"Smart Default Naming of Aliases"},{"location":"builtin-templates/sequelize/#faq","text":"","title":"FAQ"},{"location":"builtin-templates/sequelize/#i-have-multiple-schema-with-same-table-names-in-them-how-can-i-prevent-collision-of-my-model-names","text":"In your template; Rename 'sequelize/table/definition/{table.name}.js.nunj.html' as 'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html' . Change modelName macro in 'sequelize/table/definition/{table.schema.name}-{table.name}.js.nunj.html' as {{ (table.schema.name + table.name) | classCase }} . Add '{table.schema.name}-' string to 'sequelize.import' and 'require' parts in 'sequelize/db/index.js.nunj.html' file to match new model file's names.","title":"I have multiple schema with same table names in them. How can I prevent collision of my model names?"},{"location":"builtin-templates/sequelize/#i-hate-aliases-that-sequelize-template-generate-what-can-i-do","text":"You have three choices. You either do: Disable aliases all together by creating a file named option.js (you can use any name) with content as below: module.exports = { generateAliases: false // This disables aliases all together. See partials/has-many-nunj.html and other relation templates. }; Feed that file to pgen $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --optionsfile options.js Or use custom aliases for some or all models by creating a file name custom-data.js (you can use any name) with similar content as below: You can see original and overridden aliases in generated file 'relation-cheatsheet.txt'. Account: { hasMany: { HasContacts: { // This is the default alias should have generated by pgen. as: 'MyBeautifulAlias' // This is the alias you want. You renamed 'HasContacts' as 'MyBeautifulAlias' } }, Or change alias naming for all tables by changing has-many.nunj.html , belongs-to.nunj.html , belongs-to-many.nunj.html in partials directory of generated sequelize template.","title":"I hate aliases that sequelize template generate. What can I do?"},{"location":"builtin-templates/sequelize/#42nunjhtml-file-extension-is-ugly","text":"This is not a question. nunj.html extension is chosen because nunjucks command line tools expect files with extension html . However some IDE's struggle to auto complete/help/color nunjucks , swig, twig, jinja files with html extension. We can define .nunj.html extension in IDE's to differentiate template files ( .nunj.html) and html ( .html) files correctly and make nunjucks command line tools happy. However if you really like to use another file extension in your templates create template filw tih your desired extension and use --extension option of pgen $ pgen exec sequelize-template -d our_crm -u user -p tOpSeCrEt -t model --extension html","title":"*.nunj.html file extension is ugly."},{"location":"builtin-templates/tutorial/","text":"This template may be used to learn basics of pg-generator templates. Files in this template are not complicated and provides an easy start. Usage $ pgen template tutorial -t tutorial-template $ pgen exec tutorial-template -d our_crm -u user -p tOpSeCrEt -t tutorial","title":"Tutorial"},{"location":"builtin-templates/tutorial/#usage","text":"$ pgen template tutorial -t tutorial-template $ pgen exec tutorial-template -d our_crm -u user -p tOpSeCrEt -t tutorial","title":"Usage"},{"location":"template/directories-files/","text":"Special Template Directories Files pg-generator templates contain several directories and files. Directories and files listed below are part of pg-generator templates. nunjucks templates located in those directories are executed once or more. They create files in same relative position as relative position to their parent directory. For example : Template directory : .../sequelize Target directory : .../model Database name : crm Database schemas : public Database tables : company, contact, product Template File Created File .../sequelize/db/{db.name}.js.nunj.html .../model/crm.js .../sequelize/schema/{schema.name}.js.nunj.html .../model/public.js .../sequelize/schema/sub/{schema.name}.js.nunj.html .../model/sub/public.js .../sequelize/table/{table.name}.js.nunj.html .../model/company.js .../sequelize/table/{table.schema.name}/{table.name}.js.nunj.html .../model/public/company.js \"db\" directory Template files in db are executed once for the database. Variables listed below are available in those template files. Varible Name Description Example db pg-structure database object to access database details. DB API custom Custom data provided by custom data file. See below options Options provided by custom options file. See below {...} Any variable provided by index.js file's allData export. See below {...} Any variable provided by index.js file's dbData export. See below \"schema\" directory Template files in schema are executed for each PostgreSQL schema. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory. Varible Name Description Example schema pg-structure schema object to access database details. Schema API custom Custom data provided by custom data file. See below options Options provided by custom options file. See below {...} Any variable provided by index.js file's allData export. See below {...} Any variable provided by index.js file's schemaData export. See below \"table\" directory Template files in table are executed for each table. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory. Varible Name Description Example schema pg-structure table object to access database details. Table API custom Custom data provided by custom data file. See below options Options provided by custom options file. See below {...} Any variable provided by index.js file's allData export. See below {...} Any variable provided by index.js file's tableData export. See below \"copy\" directory Files in this directory are not processed by template engine and directly copied to target. Files in this directory are copied relative to the root of target directory. \"index.js\" file index.js file is a node.js module file which exports allData , dbData , schemaData and tableData functions. Those functions are used to provide additional variables to template files. It makes pg-generator templates very flexible. See Template Module API use strict ; // This file is used for providing additional data to templates during generation phase. function allData(db) { return { extraAll: db.name }; } function dbData(db) { return { extra: db.name }; } function schemaData(schema) { return { extra: schema.name }; } function tableData(table) { return { extra: table.name }; } module.exports = { allData: allData, dbData: dbData, schemaData: schemaData, tableData: tableData }; Other Directories Files Other directories and files do not have any meaning for pg-generator and they are not used. However you can create any directory to organize your partial templates. External Files External files are not part of the template. These optional files are set during file generation phase dynamically by options provided to pgen command. $ pgen sequelize --datafile custom-data.js --optionsFile customOptions Custom Data File This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named custom in template files. This data may be used very flexible ways for various reasons. For example builtin sequelize template uses this file for letting user to change some default behavior of template. Example use strict ; module.exports = { Account: { schema: super_schema , customTableAttribute: ' tableAtt ', attributes: { id: { attributeName: ID , type: ' fake_type_id ', onUpdate: ' UPDATE ME ', customAttribute: 3 }, ss: { type: ' fake_type_ss ', specialAttribute: ' ok ' }, dd: { type: ' fake_type_dd ', onUpdate: ' UPDATE ME TOO ', specA: 3, specB: 4, specC: 6 } }, hasMany: { HasContacts: { as: CustomHasContacts } }, belongsTo: { Owner: { as: CustomBelongsTo } }, belongsToMany: { ContactSecondCompanies: { as: CustomBelongsToMany , foreignKey: fake_id } } } }; Options File This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named options in template files. Usage of this file is same as custom data file except variable name used for accessing data.","title":"Directories & Files"},{"location":"template/directories-files/#special-template-directories-files","text":"pg-generator templates contain several directories and files. Directories and files listed below are part of pg-generator templates. nunjucks templates located in those directories are executed once or more. They create files in same relative position as relative position to their parent directory. For example : Template directory : .../sequelize Target directory : .../model Database name : crm Database schemas : public Database tables : company, contact, product Template File Created File .../sequelize/db/{db.name}.js.nunj.html .../model/crm.js .../sequelize/schema/{schema.name}.js.nunj.html .../model/public.js .../sequelize/schema/sub/{schema.name}.js.nunj.html .../model/sub/public.js .../sequelize/table/{table.name}.js.nunj.html .../model/company.js .../sequelize/table/{table.schema.name}/{table.name}.js.nunj.html .../model/public/company.js","title":"Special Template Directories &amp; Files"},{"location":"template/directories-files/#db-directory","text":"Template files in db are executed once for the database. Variables listed below are available in those template files. Varible Name Description Example db pg-structure database object to access database details. DB API custom Custom data provided by custom data file. See below options Options provided by custom options file. See below {...} Any variable provided by index.js file's allData export. See below {...} Any variable provided by index.js file's dbData export. See below","title":"\"db\" directory"},{"location":"template/directories-files/#schema-directory","text":"Template files in schema are executed for each PostgreSQL schema. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory. Varible Name Description Example schema pg-structure schema object to access database details. Schema API custom Custom data provided by custom data file. See below options Options provided by custom options file. See below {...} Any variable provided by index.js file's allData export. See below {...} Any variable provided by index.js file's schemaData export. See below","title":"\"schema\" directory"},{"location":"template/directories-files/#table-directory","text":"Template files in table are executed for each table. Variables listed below are available in those template files. Files in this directory are created relative to the root of target directory. Varible Name Description Example schema pg-structure table object to access database details. Table API custom Custom data provided by custom data file. See below options Options provided by custom options file. See below {...} Any variable provided by index.js file's allData export. See below {...} Any variable provided by index.js file's tableData export. See below","title":"\"table\" directory"},{"location":"template/directories-files/#copy-directory","text":"Files in this directory are not processed by template engine and directly copied to target. Files in this directory are copied relative to the root of target directory.","title":"\"copy\" directory"},{"location":"template/directories-files/#indexjs-file","text":"index.js file is a node.js module file which exports allData , dbData , schemaData and tableData functions. Those functions are used to provide additional variables to template files. It makes pg-generator templates very flexible. See Template Module API use strict ; // This file is used for providing additional data to templates during generation phase. function allData(db) { return { extraAll: db.name }; } function dbData(db) { return { extra: db.name }; } function schemaData(schema) { return { extra: schema.name }; } function tableData(table) { return { extra: table.name }; } module.exports = { allData: allData, dbData: dbData, schemaData: schemaData, tableData: tableData };","title":"\"index.js\" file"},{"location":"template/directories-files/#other-directories-files","text":"Other directories and files do not have any meaning for pg-generator and they are not used. However you can create any directory to organize your partial templates.","title":"Other Directories &amp; Files"},{"location":"template/directories-files/#external-files","text":"External files are not part of the template. These optional files are set during file generation phase dynamically by options provided to pgen command. $ pgen sequelize --datafile custom-data.js --optionsFile customOptions","title":"External Files"},{"location":"template/directories-files/#custom-data-file","text":"This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named custom in template files. This data may be used very flexible ways for various reasons. For example builtin sequelize template uses this file for letting user to change some default behavior of template. Example use strict ; module.exports = { Account: { schema: super_schema , customTableAttribute: ' tableAtt ', attributes: { id: { attributeName: ID , type: ' fake_type_id ', onUpdate: ' UPDATE ME ', customAttribute: 3 }, ss: { type: ' fake_type_ss ', specialAttribute: ' ok ' }, dd: { type: ' fake_type_dd ', onUpdate: ' UPDATE ME TOO ', specA: 3, specB: 4, specC: 6 } }, hasMany: { HasContacts: { as: CustomHasContacts } }, belongsTo: { Owner: { as: CustomBelongsTo } }, belongsToMany: { ContactSecondCompanies: { as: CustomBelongsToMany , foreignKey: fake_id } } } };","title":"Custom Data File"},{"location":"template/directories-files/#options-file","text":"This optional file is a node.js module which should export a simple JavaScript object. Exported object can be accessed with variable named options in template files. Usage of this file is same as custom data file except variable name used for accessing data.","title":"Options File"},{"location":"template/filters/","text":"Template Filters Filters are essentially functions that can be applied to variables. They are called with a pipe operator (|) and can take arguments. nunjucks filters alter output of variables in place. You can use all available builtin nunjucks filters . {{ table.name | lower }} - Converts name to lower case. (i.e. Member - member) They can be chained: {{ table.name | plural | camelCase }} - Converts name to plural in camel case. (i.e. member_name - memberNames) pg-generator filters pg-generator offfers additional filters suitable for database scaffolding. Some of them are based on highly popular inflection npm module. Filter Name Description Before After camelCase Converts string to camelcase. member_name memberName pascalCase Converts string to pascal case. member_name MemberName classCase Converts string to class case. member_name MemberName snakeCase Converts string to snake case. memberName member_name dashCase Converts string to separated by dash (-). member_Name member-name singular Converts string to singular. member_names member_name plural Converts string to plural. member_name member_names clearDefault Clears PostgreSQL default values to be used in JS code. \"O''Reilly\" \"O'Reilly\" quote Adds quotes to string using JSON.stringify . member_name \"member_name\" singleQuote Adds single quotes to string. member_name 'member_name' stringifyIfObject({nullToUndef:false, raw:false}) Converts object to string to use in template directly. { name: 'George' } { name: 'George' } stripPrefix(arg1, arg2, ...) Strips given texts and object.name s from beginning of string. cart_cart_id 1 cart_id stripSuffix(arg1, arg2, ...) Strips given texts and object.name s from end of string. cart_id 2 cart strip(arg1, arg2, ...) Strips given texts and object.name s from string. cart_product_id 3 cart_id padRight(length, [char]) Pads string with optional char (default space) until it's length equals to length. member 4 member...... relationName Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string. company_id, account company related_account makeJsDoc(str) Converts given string to JSOC lines \"some \\n multi line\" \" _ some\\n _ multi line\" * Footnotes *1 {{ 'cart_cart_id' | stripPrefix('cart') }} - cart_id {{ 'cart_cart_id' | stripPrefix(cart_table) }} - cart_id (Assuming cart_table.name equals cart) {{ 'a_b_c_table' | stripPrefix('a', 'b') }} - c_table *2 {{ 'cart_id' | stripSuffix('id') }} - cart *3 {{ 'cart_product_id' | strip('product') }} - cart_id *4 {{ 'member' | padRight(10) }} - member - Space padded until here. {{ 'member' | padRight(10, '_') }} - member____ API of Filter Functions clearDefault(string) \u21d2 string boolean undefined Clears SQL type escapes (Two quote '' to one quote ') and strips beginning and trailing quotes around string. Also escapes result according to JSON standards. Returns : string boolean undefined - - Default value to use in template. Param Type Description string string Default value returned from PostgreSQL. relationName(str, [prefix]) \u21d2 string Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string. company_id - company, account - related_account Returns : string - - Name for the belongsTo relationship. Param Type Default Description str string Foreign key name. [prefix] string related Prefix to add if no given string does not contain 'id'. stripPrefix(source, arguments) \u21d2 string Variadic function which strips given list of strings or object's names from start of the source string. Returns : string - - Cleaned string. Param Type Description source string Source string to be cleaned. arguments string Object List of strings or objects (object's names) to delete from source string. stripSuffix(source, arguments) \u21d2 string Variadic function which strips given list of strings or object's names from end of the source string. Returns : string - - Cleaned string. Param Type Description source string Source string to be cleaned. arguments string Object List of strings or objects (object's names) to delete from source string. padRight(str, count, [char]) \u21d2 string Pads given string's right side with given character (default space) to complete its length to count. Returns : string - - Result string with length of count. Param Type Default Description str string Source string. count number Total length of the result string. [char] string space Padding character","title":"Filters"},{"location":"template/filters/#template-filters","text":"Filters are essentially functions that can be applied to variables. They are called with a pipe operator (|) and can take arguments. nunjucks filters alter output of variables in place. You can use all available builtin nunjucks filters . {{ table.name | lower }} - Converts name to lower case. (i.e. Member - member) They can be chained: {{ table.name | plural | camelCase }} - Converts name to plural in camel case. (i.e. member_name - memberNames)","title":"Template Filters"},{"location":"template/filters/#pg-generator-filters","text":"pg-generator offfers additional filters suitable for database scaffolding. Some of them are based on highly popular inflection npm module. Filter Name Description Before After camelCase Converts string to camelcase. member_name memberName pascalCase Converts string to pascal case. member_name MemberName classCase Converts string to class case. member_name MemberName snakeCase Converts string to snake case. memberName member_name dashCase Converts string to separated by dash (-). member_Name member-name singular Converts string to singular. member_names member_name plural Converts string to plural. member_name member_names clearDefault Clears PostgreSQL default values to be used in JS code. \"O''Reilly\" \"O'Reilly\" quote Adds quotes to string using JSON.stringify . member_name \"member_name\" singleQuote Adds single quotes to string. member_name 'member_name' stringifyIfObject({nullToUndef:false, raw:false}) Converts object to string to use in template directly. { name: 'George' } { name: 'George' } stripPrefix(arg1, arg2, ...) Strips given texts and object.name s from beginning of string. cart_cart_id 1 cart_id stripSuffix(arg1, arg2, ...) Strips given texts and object.name s from end of string. cart_id 2 cart strip(arg1, arg2, ...) Strips given texts and object.name s from string. cart_product_id 3 cart_id padRight(length, [char]) Pads string with optional char (default space) until it's length equals to length. member 4 member...... relationName Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string. company_id, account company related_account makeJsDoc(str) Converts given string to JSOC lines \"some \\n multi line\" \" _ some\\n _ multi line\" * Footnotes *1 {{ 'cart_cart_id' | stripPrefix('cart') }} - cart_id {{ 'cart_cart_id' | stripPrefix(cart_table) }} - cart_id (Assuming cart_table.name equals cart) {{ 'a_b_c_table' | stripPrefix('a', 'b') }} - c_table *2 {{ 'cart_id' | stripSuffix('id') }} - cart *3 {{ 'cart_product_id' | strip('product') }} - cart_id *4 {{ 'member' | padRight(10) }} - member - Space padded until here. {{ 'member' | padRight(10, '_') }} - member____","title":"pg-generator filters"},{"location":"template/filters/#api-of-filter-functions","text":"","title":"API of Filter Functions"},{"location":"template/filters/#cleardefaultstring-string-boolean-undefined","text":"Clears SQL type escapes (Two quote '' to one quote ') and strips beginning and trailing quotes around string. Also escapes result according to JSON standards. Returns : string boolean undefined - - Default value to use in template. Param Type Description string string Default value returned from PostgreSQL.","title":"clearDefault(string) \u21d2 string &#124; boolean &#124; undefined"},{"location":"template/filters/#relationnamestr-prefix-string","text":"Converts foreign key name to be used in a relationship. If string ends with '_id' or 'id', strips it (case insensitive). Otherwise adds given prefix at the beginning of the string. company_id - company, account - related_account Returns : string - - Name for the belongsTo relationship. Param Type Default Description str string Foreign key name. [prefix] string related Prefix to add if no given string does not contain 'id'.","title":"relationName(str, [prefix]) \u21d2 string"},{"location":"template/filters/#stripprefixsource-arguments-string","text":"Variadic function which strips given list of strings or object's names from start of the source string. Returns : string - - Cleaned string. Param Type Description source string Source string to be cleaned. arguments string Object List of strings or objects (object's names) to delete from source string.","title":"stripPrefix(source, arguments) \u21d2 string"},{"location":"template/filters/#stripsuffixsource-arguments-string","text":"Variadic function which strips given list of strings or object's names from end of the source string. Returns : string - - Cleaned string. Param Type Description source string Source string to be cleaned. arguments string Object List of strings or objects (object's names) to delete from source string.","title":"stripSuffix(source, arguments) \u21d2 string"},{"location":"template/filters/#padrightstr-count-char-string","text":"Pads given string's right side with given character (default space) to complete its length to count. Returns : string - - Result string with length of count. Param Type Default Description str string Source string. count number Total length of the result string. [char] string space Padding character","title":"padRight(str, count, [char]) \u21d2 string"},{"location":"template/template/","text":"Templates pg-generator uses templates to generate files. A pg-generator template is a directory containing some special named directories and nunjucks files. Developers can use one of the pg-generator's builtin templates or create or modify templates according to their needs.","title":"Template"},{"location":"template/template/#templates","text":"pg-generator uses templates to generate files. A pg-generator template is a directory containing some special named directories and nunjucks files. Developers can use one of the pg-generator's builtin templates or create or modify templates according to their needs.","title":"Templates"},{"location":"template/utility-functions/","text":"Utility Funtions pg-generator provides some utility functions. Schema Generating Utilities Schema generating utilites generates schemas for common basic needs. If you need custom functionality, you should do it in template manuanlly. Signature of functions are as below: schemaFunction(table, options) Name Type Default Description table Object pg-structure table object [options] Object Options [options.exclude] string[] Array of column names to exclude [options.jsonAsString] boolean false Whether json and jsonb types are expected as a string [options.defaultValueOptional] boolean false Whether to make columns with default values optional pgen.tableJsDocSchema Generates JSDoc documentation for given table. Example usage in template: /** * {{ table.schema.name }}.{{ table.name }} {{ table.description | makeJsDoc }} {{ pgen.tableJsDocSchema(table) -}} */ pgen.tableTypeScriptSchema Generates TypeScript types for given table. Example usage in template: class {{ table.name | classCase }} extends Model { {{ pgen.tableTypeScriptSchema(table) }} } pgen.tableJoiSchema Generates Joi schema for given table. Joi.object({ {{ pgen.tableJoiSchema(table) | stringifyIfObject(raw = true) }} }); pgen.tableJsonSchema Generates JSON Schema for given table. {{ pgen.tableJsonSchema(table) | stringifyIfObject }};","title":"Utility"},{"location":"template/utility-functions/#utility-funtions","text":"pg-generator provides some utility functions.","title":"Utility Funtions"},{"location":"template/utility-functions/#schema-generating-utilities","text":"Schema generating utilites generates schemas for common basic needs. If you need custom functionality, you should do it in template manuanlly. Signature of functions are as below: schemaFunction(table, options) Name Type Default Description table Object pg-structure table object [options] Object Options [options.exclude] string[] Array of column names to exclude [options.jsonAsString] boolean false Whether json and jsonb types are expected as a string [options.defaultValueOptional] boolean false Whether to make columns with default values optional","title":"Schema Generating Utilities"},{"location":"template/utility-functions/#pgentablejsdocschema","text":"Generates JSDoc documentation for given table. Example usage in template: /** * {{ table.schema.name }}.{{ table.name }} {{ table.description | makeJsDoc }} {{ pgen.tableJsDocSchema(table) -}} */","title":"pgen.tableJsDocSchema"},{"location":"template/utility-functions/#pgentabletypescriptschema","text":"Generates TypeScript types for given table. Example usage in template: class {{ table.name | classCase }} extends Model { {{ pgen.tableTypeScriptSchema(table) }} }","title":"pgen.tableTypeScriptSchema"},{"location":"template/utility-functions/#pgentablejoischema","text":"Generates Joi schema for given table. Joi.object({ {{ pgen.tableJoiSchema(table) | stringifyIfObject(raw = true) }} });","title":"pgen.tableJoiSchema"},{"location":"template/utility-functions/#pgentablejsonschema","text":"Generates JSON Schema for given table. {{ pgen.tableJsonSchema(table) | stringifyIfObject }};","title":"pgen.tableJsonSchema"}]}