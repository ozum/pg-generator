// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`scaffold should generate nunjucks scaffold. 1`] = `
Object {
  "package.json": "{
  \\"name\\": \\"pg-generator-out\\",
  \\"version\\": \\"1.0.0\\",
  \\"description\\": \\"pg-generator plugin that generates ...\\",
  \\"author\\": \\"\\",
  \\"keywords\\": [
    \\"pg-generator\\",
    \\"plugin\\"
  ],
  \\"main\\": \\"dist/index.js\\",
  \\"files\\": [
    \\"dist\\"
  ],
  \\"types\\": \\"dist/index.d.ts\\",
  \\"scripts\\": {
    \\"build\\": \\"tsc\\",
    \\"test\\": \\"echo \\\\\\"Error: no test specified\\\\\\" && exit 1\\"
  },
  \\"homepage\\": \\"\\",
  \\"bugs\\": \\"\\",
  \\"repository\\": \\"\\",
  \\"license\\": \\"MIT\\",
  \\"dependencies\\": {
    \\"nunjucks\\": \\"^3.2.3\\",
    \\"pg-generator\\": \\"^5.0.0-alpha.6\\"
  },
  \\"devDependencies\\": {
    \\"@types/node\\": \\"^14.14.31\\",
    \\"@types/nunjucks\\": \\"^3.1.4\\",
    \\"pg-structure\\": \\"^7.7.1\\",
    \\"typescript\\": \\"^4.1.5\\"
  }
}",
  "src/app/context.ts": "export default {
  // Values under \\"global\\" key is sent to all templates.
  global: {
    // We added an attribute called \\"addSchemaName\\". It has no special meaning, and you can choose any name.
    // We used \\"addSchemaName\\" in templates to determine whether to add schema names to class names.
    addSchemaName: true,
  },
  // Values under \\"tables\\" key is sent to templates related to corresponding table.
  tables: {
    // Data below only sent to templates related to \`public.xyz\` table.*/
    \\"public.xyz\\": {},
  },
};
",
  "src/app/index.ts": "/* eslint-disable class-methods-use-this */
import { PgGenerator, Context } from \\"pg-generator\\";
import { getNunjucks } from \\"../utils/get-nunjucks\\";
import generatorContext from \\"./context\\";

const nunjucks = getNunjucks(__dirname);

/**
 * Example \`pg-generator\` generator which creates sequelize models.
 */
export default class App extends PgGenerator {
  /**
   * Returns a context data including sequelize data types and some other examples.
   */
  protected context(): Record<string, any> {
    return generatorContext;
  }

  /**
   * Render method which uses a nunjucks template. You can use any template engine.
   * \`pg-generator\` is template engine agnostic.
   */
  protected async render(templatePath: string, context: Context): Promise<string> {
    return nunjucks.render(templatePath, context);
  }
}
",
  "src/app/templates/[db] index.js.njk": "{%- for table in db.tables %}
const {{ table | dboClassName(addSchemaName) }} = \\"\\";
{%- endfor %}

",
  "src/app/templates/[table] {schema.name # dash-case}.{name # dash-case}.js.njk": "{%- for column in table.columns %}
{{ column.name }}
{%- endfor %}

",
  "src/index.ts": "console.warn(\\"This is a pg-generator plugin. It is not intended for direct usage. Use it vie pg-generator.\\"); // eslint-disable-line no-console
",
  "src/partials/stub.md.njk": "This is a stub file to commit the directory to git.
",
  "src/utils/filters.ts": "import type { Table } from \\"pg-structure\\";

/**
 * Adds \\"Hello!\\"\\" to the beginning of the string.
 *
 * @param input is the input.
 * @returns the text with \\"Hello!\\".
 *
 * @example
 * {{ table.name | hello }}
 */
export function hello(input: string): string {
  return \`Hello! \${input}\`;
}

/**
 * Returns column names of the table as a CSV list.
 *
 * @param table is the table to get columns of.
 * @returns column names as CSV.
 *
 * @example
 * {{ table | columnNames }}
 */
export function columnNames(table: Table): string {
  return table.columns.map((column) => column.name).join(\\", \\");
}
",
  "src/utils/get-nunjucks.ts": "import { join } from \\"path\\";
import { filterFunctions } from \\"pg-generator\\";
import nunjucks, { Environment } from \\"nunjucks\\";
import * as filters from \\"./filters\\";

/**
 * Creates \`nunjucks\` template engine environment for the given generator and adds filters.
 *
 * @param generatorPath is the path of the generator.
 */
export function getNunjucks(generatorPath: string): Environment {
  // Create \`nunjucks\` environment.
  const environment = new nunjucks.Environment(
    // Add given sub-generator path and shared \\"partials\\" path to the list of template paths.
    new nunjucks.FileSystemLoader([join(generatorPath, \\"templates\\"), join(__dirname, \\"../partials\\")]),
    { autoescape: false }
  );

  // Add pg-generator and custom filters to nunjucks. Filters are not nunjucks specific, many template engines have a similar mechanism.
  Object.entries({ ...filterFunctions, ...filters }).forEach(([name, filter]) => environment.addFilter(name, filter));
  return environment;
}
",
  "tsconfig.json": "{
  \\"compilerOptions\\": {
    // Visit https://aka.ms/tsconfig.json to read more about this file

    // Basic Options
    \\"incremental\\": true, // Enable incremental compilation
    \\"target\\": \\"ES2019\\", // Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'.
    \\"module\\": \\"commonjs\\", // Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'.
    // \\"lib\\": [\\"dom\\", \\"esnext\\"],              // Specify library files to be included in the compilation.
    // \\"allowJs\\": true,                       // Allow javascript files to be compiled.
    // \\"checkJs\\": true,                       // Report errors in .js files.
    // \\"jsx\\": \\"preserve\\",                     // Specify JSX code generation: 'preserve', 'react-native', or 'react'.
    \\"declaration\\": true, // Generates corresponding '.d.ts' file.
    \\"declarationMap\\": true, // Generates a sourcemap for each corresponding '.d.ts' file.

    \\"sourceMap\\": true, // Generates corresponding '.map' file.
    // \\"outFile\\": \\"./\\",                       // Concatenate and emit output to single file.
    \\"outDir\\": \\"dist\\", // Redirect output structure to the directory.
    // \\"rootDir\\": \\"./\\",                       // Specify the root directory of input files. Use to control the output directory structure with --outDir.
    // \\"composite\\": true,                     // Enable project compilation
    // \\"tsBuildInfoFile\\": \\"./\\",               // Specify file to store incremental compilation information
    // \\"removeComments\\": true,                // Do not emit comments to output.
    // \\"noEmit\\": true,                        // Do not emit outputs.
    // \\"importHelpers\\": true,                 // Import emit helpers from 'tslib'.
    // \\"downlevelIteration\\": true,            // Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'.
    // \\"isolatedModules\\": true,               // Transpile each file as a separate module (similar to 'ts.transpileModule').

    // Strict Type-Checking Options
    \\"strict\\": true, // Enable all strict type-checking options.
    // \\"noImplicitAny\\": true,                 // Raise error on expressions and declarations with an implied 'any' type.
    // \\"strictNullChecks\\": true,              // Enable strict null checks.
    // \\"strictFunctionTypes\\": true,           // Enable strict checking of function types.
    // \\"strictBindCallApply\\": true,           // Enable strict 'bind', 'call', and 'apply' methods on functions.
    // \\"strictPropertyInitialization\\": true,  // Enable strict checking of property initialization in classes.
    // \\"noImplicitThis\\": true,                // Raise error on 'this' expressions with an implied 'any' type.
    // \\"alwaysStrict\\": true,                  // Parse in strict mode and emit \\"use strict\\" for each source file.

    // Additional Checks
    // \\"noUnusedLocals\\": true,                // Report errors on unused locals.
    // \\"noUnusedParameters\\": true,            // Report errors on unused parameters.
    // \\"noImplicitReturns\\": true,             // Report error when not all code paths in function return a value.
    // \\"noFallthroughCasesInSwitch\\": true,    // Report errors for fallthrough cases in switch statement.
    // \\"noUncheckedIndexedAccess\\": true,      // Include 'undefined' in index signature results

    // Module Resolution Options
    // \\"moduleResolution\\": \\"node\\",            // Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
    // \\"baseUrl\\": \\"./\\",                       // Base directory to resolve non-absolute module names.
    // \\"paths\\": {},                           // A series of entries which re-map imports to lookup locations relative to the 'baseUrl'.
    // \\"rootDirs\\": [],                        // List of root folders whose combined content represents the structure of the project at runtime.
    // \\"typeRoots\\": [],                       // List of folders to include type definitions from.
    // \\"types\\": [],                           // Type declaration files to be included in compilation.
    // \\"allowSyntheticDefaultImports\\": true,  // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    \\"esModuleInterop\\": true, // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.
    // \\"preserveSymlinks\\": true,              // Do not resolve the real path of symlinks.
    // \\"allowUmdGlobalAccess\\": true,          // Allow accessing UMD globals from modules.

    // Source Map Options
    // \\"sourceRoot\\": \\"\\",                      // Specify the location where debugger should locate TypeScript files instead of source locations.
    // \\"mapRoot\\": \\"\\",                         // Specify the location where debugger should locate map files instead of generated locations.
    // \\"inlineSourceMap\\": true,               // Emit a single file with source maps instead of having a separate file.
    // \\"inlineSources\\": true,                 // Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set.

    // Experimental Options
    \\"experimentalDecorators\\": true, // Enables experimental support for ES7 decorators.
    \\"emitDecoratorMetadata\\": true, // Enables experimental support for emitting type metadata for decorators.

    // Advanced Options
    \\"skipLibCheck\\": true, // Skip type checking of declaration files.
    \\"forceConsistentCasingInFileNames\\": true // Disallow inconsistently-cased references to the same file.
  },
  \\"include\\": [\\"src/**/*\\"],
  \\"exclude\\": [\\"node_modules\\", \\"dist\\"]
}
",
}
`;
